# Publishing & Reporting

Business analysts are used to report to management and/or clients on a regular basis. Academia has a lively debate about science communication. So what does a researcher need to know about publishing and reporting in order to make right choices? 
The key term about modern reporting in both cases is *regular*. Data might get revised or otherwise updated, journals, reviewers and readers will ask for reproducible research. Dissemination of datasets and results in visually appealing as well as machine readable communication are equally important in modern publishing and reporting. 

Because of frequent updates and reproducibility, manually composed outlets become less sustainable. Luckily, markdown based reporting offers great solutions for presentations, websites, reports, blogs, office documents or even printed output. Document converters can turn markdown into HTML/CSS/Javascript output for flexible use in a standard web browser. Likewise, markdown renders to PDF or even Microsoft Word. 

Approaches such as Quarto, RMarkdown or Jupyter Notebooks mix plain text with dynamically rendered code chunks that create tables or figures and embedd these into the document in the right size and spot. Such a setup is the basis to fully automate the way from analysis to report no matter whether the outlet is printed, a Word document, a presentation, blog or website. 

## Static Website Generators

Let's take a deeper look at how a report goes online in fully automated fashion from computation to a website.
In a nutshell, static website generators turn markdown code 
into a combination of HTML, CSS and Javascript, so a web browser can display the result. 
The Go based [hugo](https://gohugo.io/) or the classic [Jekyll](https://jekyllrb.com/) are popular static website generator approaches to run a website or blog.
A static website generator would turn the following markdown code

```md
## This a level two header

This is plain text *this is italic* and **this is bold**

### This is a level three header 

more text

```

into this output, stored in HTML and CSS files. 

## This a level two header {.unnumbered}

This is plain text *this is italic* and **this is bold**

### This is a level three header {.unnumbered}

more text



Approaches such as the {distill} R package or [quarto](https://quarto.org), the new kid on the block, add data science & analytics flavor to the static website generator approach: Those implementations allows to run analytics' code at render time. 
Quarto documents, for example, are text files that contain markdown text and possibly code chunks in the same documents. 
When rendered, the analytics code runs first, potentially creating output such as tables or figures.
If necessary, this output is stored in separate files and smoothly integrated into main document that is about to be rendered afterwards.  

>Rendered output often consists of multiple files such as HTML documents, CSS style information, javascript code or images.
Because this may be fine for websites but inconvenient for presentations or the exchange of reports, analytics minded renderes such as quarto offer a **self-contained** option. 
When enabled, quarto renders a single self-contained, encoded HTML file that contains everything from javscript to images. 



## Hosting Static Websites

Because the requirements of a static website are minimal, we can essentially use the simplest website host possible to host our static site.
Unlike with content management system approaches such as Wordpress, static websites do not need server side scripting languages or databases. 
This simplicity allows to host static websites on a plethora of cheap hosters, including many free plans.

### GitHub Pages

One very good and simple solution to host blogs, personal websites, online documentation or presentations is to use offerings of major git providers such as Github's [Github Pages]().
Though originally meant to be used with themes provided by GitHub and markdown rendered by Jekyll on GitHub's servers, GitHub Pages became the home of an abundance of static sites rendered by a wide array of static website generators.    

All you need is a repository on GitHub to host the static files. You can activate GitHub Pages for your repository and choose whether you rather want the rendered files to be on a separate branch named *gh-pages* or in a subfolder of your root directory (mostly docs).
Personally, I favor to use a seperate *gh-pages* branch, because git would track every single change made to the automatically rendered content, leading to a messy git history. 

By convention the corresponding static website of a git repository is exposed at `<username>.github.io/<repository-name>`.
For GitHub organizations which are popular to group repositories, the exposed URL would be
`<orgname>.github.io/<repository-name>`. 

>Note that the online version of the book you are currently reading is hosted in very same fashion: `devops-carpentry.github.io/book`

### GitHub Actions

Hosting a website on a modern git platform comes with an intriguing option: the use of continous integration tools as discussed in the automation chapter. 
CI/CD is capable of not only rendering markdown, but can even run computations and virtually any pre-requisite step thanks to the underlying docker technology. 
CI/CD certainly introduces a setup hurdle, but allows to integrate users who do not have the necessary stack installed to execute the render process locally. 

### Netlify

The [Netlify](https://netlify.app/) platform does not host git repositories like GitHub or Bitbucket, but rather focuses on the *build* part.
Netlify supports the user in setting up the build process and offers a few add-ons such as Netlify forms to allow for website feature that can process user interaction such as online forms. 
Also, unlike git platforms, Netlify integrates domain purchase into its own platflorm. 
Note that Netlify and git are complementary, not mutually exclusive approaches. 
Platflorms like Netlify and GitHub use APIs to communicate with each other allowing to trigger Netlify builds based on changes to a GitHub repositories. 

>Basic GitHub pages setups are good enough for online documentation of most software or other sites that simply display static content. 
Netlify cannot only improve convenience when using advanced features, it can also extend possibilities for static websites when needed. 


## Visualization

- importance of data visualization in communication of results
- distinction between approaches
    - png/pdf/pring -> ggplot2, matplotlib
    - javascript/web
        - apache echarts
        - high charts
        - d3 / SVG
        - specific libraries like dygraphs

## Data Publications

- alongside papers
- opendata, open research data



    






